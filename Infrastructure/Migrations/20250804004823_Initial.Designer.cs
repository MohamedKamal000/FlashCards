// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250804004823_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Card", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CardTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("DeckId")
                        .IsRequired()
                        .HasColumnType("binary(16)");

                    b.Property<string>("PicturePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Domain.Entities.CardStatus", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("CardId")
                        .IsRequired()
                        .HasColumnType("binary(16)");

                    b.Property<bool>("NeedsRevision")
                        .HasColumnType("bit");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("UserId");

                    b.ToTable("CardsStatus");
                });

            modelBuilder.Entity("Domain.Entities.Deck", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("CreatorId")
                        .IsRequired()
                        .HasColumnType("binary(16)");

                    b.Property<string>("DeckCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeckDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DeckName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeletedByCreator")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Domain.Entities.Note", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("NoteFilePath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ReferencedDeck_ReferencedUser", b =>
                {
                    b.Property<byte[]>("DeckId")
                        .HasColumnType("binary(16)");

                    b.Property<byte[]>("UserId")
                        .HasColumnType("binary(16)");

                    b.HasKey("DeckId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ReferencedDeck_ReferencedUser", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Card", b =>
                {
                    b.HasOne("Domain.Entities.Deck", "DeckUsedIn")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeckUsedIn");
                });

            modelBuilder.Entity("Domain.Entities.CardStatus", b =>
                {
                    b.HasOne("Domain.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RevisionList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Deck", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatorUser")
                        .WithMany("CreatedDecks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("Domain.Entities.Note", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReferencedDeck_ReferencedUser", b =>
                {
                    b.HasOne("Domain.Entities.Deck", null)
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Deck", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedDecks");

                    b.Navigation("Notes");

                    b.Navigation("RevisionList");
                });
#pragma warning restore 612, 618
        }
    }
}
